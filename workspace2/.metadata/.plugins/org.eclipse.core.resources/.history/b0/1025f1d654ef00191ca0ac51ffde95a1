package serve;

import java.io.*;
import java.net.Socket;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;

import serve.SeekSql;

public class ServeThread extends Thread {

	private SeekSql sql;
	Socket socket;
	ObjectOutputStream obout;
	BufferedInputStream buin;
	BufferedOutputStream buout;

	public ServeThread(Socket socket) {
		this.socket = socket;
		sql = new SeekSql();
		try {
			obout = new ObjectOutputStream(socket.getOutputStream());
			buin = new BufferedInputStream(socket.getInputStream());
			buout = new BufferedOutputStream(socket.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		super.run();
		try {
			while (true) {
				byte[] inputData = new byte[524];
				int n = buin.read(inputData);
				System.out.println("接收到了客户端的请求");
				String inputMsg[] = new String(inputData, 0, n, "UTF-8").split(":");
				System.out.println(inputMsg[0].equals(Setting.request.GetList.toString()));
				if (inputMsg[0].equals(Setting.request.GetList.toString())) {
					SendList(inputMsg[1]);
				}
				else if(inputMsg[0].equals(Setting.request.GetSong.toString())) {

		            System.out.println("SONG");
					SendSong(inputMsg[1]);
				}
			}
		} catch (IOException e) {
			if (e.getMessage() == "Connection reset") {
				System.out.println("关闭");
			} else {
				e.printStackTrace();
			}
		}
	}

	private void SendList(String arear) {
		try {
			for (Setting.Arears a : Setting.Arears.values()) {
				if (a.toString().equals(arear)) {
					obout.writeObject(sql.GetList(a));
					obout.flush();
					return;
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void SendSong(String name) {
		try {
			String path = sql.GetPath(name);
			AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(path));
            AudioFormat audioFormat = audioInputStream.getFormat();
            if (audioFormat.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {
                System.out.println(audioFormat.getEncoding());
                audioFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, audioFormat.getSampleRate(), 16, audioFormat.getChannels(), audioFormat.getChannels() * 2, audioFormat.getSampleRate(), false);
                audioInputStream = AudioSystem.getAudioInputStream(audioFormat, audioInputStream);
            }
            
		} catch (IOException | UnsupportedAudioFileException e) {
			e.printStackTrace();
		}
	}

}
